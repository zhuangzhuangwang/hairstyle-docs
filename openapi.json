{
  "openapi": "3.1.0",
  "info": {
    "title": "AILabTools API",
    "description": "Hairstyle Changer Pro 与异步查询接口",
    "version": "1.0.0"
  },
  "servers": [ { "url": "https://www.ailabapi.com" } ],
  "security": [ { "apiKeyAuth": [] } ],
  "components": {
    "securitySchemes": {
      "apiKeyAuth": { "type": "apiKey", "in": "header", "name": "ailabapi-api-key" }
    },
    "schemas": {
      "HairstyleEditorForm": {
        "type": "object",
        "required": ["task_type", "auto", "image", "hair_style"],
        "properties": {
          "task_type": { "type": "string", "enum": ["async"], "description": "Task Type. async: Asynchronous tasks." },
          "auto": { "type": "integer", "enum": [1], "description": "Mode. 1: Automatic mode." },
          "image": { "type": "string", "format": "binary", "description": "Main image file (PNG/JPG/JPEG). ≤3MB, 200x200~1999x1999." },
          "hair_style": {
            "type": "string",
            "description": "Hairstyle. See docs for categories.",
            "enum": [
              "BuzzCut","UnderCut","Pompadour","SlickBack","CurlyShag","WavyShag","FauxHawk","Spiky","CombOver","HighTightFade","ManBun","Afro","LowFade","UndercutLongHair","TwoBlockHaircut","TexturedFringe","BluntBowlCut","LongWavyCurtainBangs","MessyTousled","CornrowBraids","LongHairTiedUp","Middle-parted",
              "ShortPixieWithShavedSides","ShortNeatBob","DoubleBun","Updo","Spiked","bowlCut","Chignon","PixieCut","SlickedBack","LongCurly","CurlyBob","StackedCurlsInShortBob","SidePartCombOverHairstyleWithHighFade","WavyFrenchBobVibesfrom1920","BobCut","ShortTwintails","ShortCurlyPixie","LongStraight","LongWavy","FishtailBraid","TwinBraids","Ponytail","Dreadlocks","Cornrows","ShoulderLengthHair","LooseCurlyAfro","LongTwintails","LongHimeCut","BoxBraids"
            ]
          },
          "color": {
            "type": "string",
            "nullable": true,
            "description": "Color (optional).",
            "enum": [
              "blonde","platinumBlonde","brown","lightBrown","blue","lightBlue","purple","lightPurple","pink","black","white","grey","silver","red","orange","green","gradient","multicolored","darkBlue","burgundy","darkGreen"
            ]
          },
          "image_size": { "type": "integer", "nullable": true, "enum": [1,2,3,4], "description": "Returns the number of images. Default 1." }
        }
      },
      "HairstyleEditorResponse": {
        "type": "object",
        "properties": {
          "request_id": { "type": "string" },
          "log_id": { "type": "string" },
          "error_code": { "type": "integer" },
          "error_msg": { "type": "string", "nullable": true },
          "error_detail": {
            "type": "object",
            "properties": {
              "status_code": { "type": "integer" },
              "code": { "type": "string", "nullable": true },
              "code_message": { "type": "string", "nullable": true },
              "message": { "type": "string", "nullable": true }
            }
          },
          "task_type": { "type": "string" },
          "task_id": { "type": "string" }
        }
      },
      "AsyncTaskResultsResponse": {
        "type": "object",
        "properties": {
          "error_code": { "type": "integer" },
          "error_msg": { "type": "string", "nullable": true },
          "error_detail": {
            "type": "object",
            "properties": {
              "status_code": { "type": "integer" },
              "code": { "type": "string", "nullable": true },
              "code_message": { "type": "string", "nullable": true },
              "message": { "type": "string", "nullable": true }
            }
          },
          "task_status": { "type": "integer", "description": "0: queued, 1: processing, 2: success", "enum": [0,1,2] },
          "data": { "type": "object", "properties": { "images": { "type": "array", "items": { "type": "string", "format": "uri" } } } }
        }
      },
      "FaceAnalysisForm": {
        "type": "object",
        "required": ["task_type", "image"],
        "properties": {
          "task_type": {
            "type": "string",
            "enum": ["sync", "async"],
            "description": "Task Type. sync: synchronous (recommended for validation); async: asynchronous.",
            "default": "sync"
          },
          "image": { 
            "type": "string", 
            "format": "binary", 
            "description": "Image file for face analysis (PNG/JPG/JPEG). ≤3MB, 200x200~1999x1999." 
          }
        }
      },
      "FaceAnalysisResponse": {
        "type": "object",
        "properties": {
          "request_id": { "type": "string", "description": "Request ID" },
          "log_id": { "type": "string", "description": "Log ID" },
          "error_code": { "type": "integer", "description": "Error code, 0 means success" },
          "error_msg": { "type": "string", "nullable": true, "description": "Error message" },
          "error_detail": {
            "type": "object",
            "properties": {
              "status_code": { "type": "integer" },
              "code": { "type": "string", "nullable": true },
              "code_message": { "type": "string", "nullable": true },
              "message": { "type": "string", "nullable": true }
            }
          },
          "result": {
            "type": "object",
            "properties": {
              "face_num": { 
                "type": "integer", 
                "description": "Number of faces detected" 
              },
              "face_info": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "face_id": { "type": "string", "description": "Face ID" },
                    "face_rect": {
                      "type": "object",
                      "properties": {
                        "x": { "type": "integer", "description": "Face top-left X coordinate" },
                        "y": { "type": "integer", "description": "Face top-left Y coordinate" },
                        "width": { "type": "integer", "description": "Face width" },
                        "height": { "type": "integer", "description": "Face height" }
                      }
                    },
                    "face_angle": { "type": "number", "description": "Face angle (degrees)" },
                    "face_proportion": { "type": "number", "description": "Face proportion in image (0-1)" }
                  }
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error_code": { "type": "integer" },
          "error_detail": { "type": "object", "properties": { "message": { "type": "string" } } }
        }
      }
    }
  },
  "paths": {
    "/api/portrait/effects/hairstyle-editor-pro": {
      "post": {
        "summary": "Hairstyle Changer Pro",
        "description": "Use multipart/form-data per official docs.",
        "requestBody": {
          "required": true,
          "content": { "multipart/form-data": { "schema": { "$ref": "#/components/schemas/HairstyleEditorForm" } } }
        },
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HairstyleEditorResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    },
    "/api/common/query-async-task-result": {
      "get": {
        "summary": "Query Async Task Results",
        "description": "For asynchronous interface, after calling the API, the returned result is not the real request result, you need to save the task_id in the returned result and then call this interface to get the real request result.",
        "parameters": [ 
          { 
            "name": "task_id", 
            "in": "query", 
            "required": true, 
            "schema": { "type": "string" }, 
            "description": "The task_id returned by the asynchronous API." 
          } 
        ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AsyncTaskResultsResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    },
    "/api/portrait/analysis/face-analysis": {
      "post": {
        "summary": "Face Analysis",
        "description": "Analyze face information in images, including face count, position, angle, etc., for frontend validation before hairstyle processing",
        "requestBody": {
          "required": true,
          "content": { 
            "multipart/form-data": { 
              "schema": { "$ref": "#/components/schemas/FaceAnalysisForm" } 
            } 
          }
        },
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FaceAnalysisResponse" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    }
  }
}
